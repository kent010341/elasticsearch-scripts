#!/bin/bash

# default value
es_host=127.0.0.1
es_port=9200
es_container=elasticsearch
register_path="/usr/share/elasticsearch/backup"
from_step=1

while (($#)); do
    case $1 in
        "--eshost" | "-eh")
            shift
            es_host=$1
            shift
        ;;
        "--esport" | "-ep")
            shift
            es_port=$1
            shift
        ;;
        "--escontainer" | "-ec")
            shift
            es_container=$1
            shift
        ;;
        "--index" | "-i")
            shift
            index=$1
            shift
        ;;
        "--repo" | "-r")
            shift
            repo=$1
            shift
        ;;
        "--snapshot" | "-s")
            shift
            snapshot=$1
            shift
        ;;
        "--register-path" | "-rp")
            shift
            register_path=$1
            shift
        ;;
        "--output" | "-o")
            shift
            output=$1
            shift
        ;;
        "--from-step" | "-f")
            shift
            from_step=$1
            shift
        ;;
        "--help" | "-h")
            echo "Required options:"
            echo "    --snapshot <snapshot>, -s <snapshot>"
            echo "        Snapshot name."
            echo "    --repo <repository>, -r <repository>"
            echo "        Snapshot repository name."
            echo
            echo "Optional options:"
            echo "    --eshost <host>, -eh <host>"
            echo "        Elasticsearch service host. Default: 127.0.0.1"
            echo "    --esport <port>, -ep <port>"
            echo "        Elasticsearch service port. Default: 9200"
            echo "    --escontainer <container name>, -ec <continer name>"
            echo "        Elasticsearch docker container name. Default: elasticsearch"
            echo "    --index <index>, -i <index>"
            echo "        Index that specified to be exported. Defaultly export all indices."
            echo "    --register-path <path>, -rp <path>"
            echo "        Path of snapshot repository. Used for registering repository if repository doesn't exists. Default: /usr/share/elasticsearch/backup"
            echo "    --output <path>, -o <path>"
            echo "        Output path. Defaultly use backup_{time} if index not specified, and use backup_{index} if index is specified."
            echo "    --from-step <step>, -f <step>"
            echo "        Start from which step. Default: 1"
            exit 0
        ;;
        *)
            echo "unknown argument '$1'"
            echo "Use --help (or -h) to get the usage information."
            exit 1
    esac
done

if [ "$repo" == "" ]; then
    echo "Option --repo is required."
    exit 1
fi

if [ "$snapshot" == "" ]; then
    echo "Option --snapshot is required."
    exit 1
fi

# checking repository register
if [ $from_step -le 1 ]; then
    echo "[Step 1] Check if the repository '$repo' is registered."
    curl --silent --fail-with-body "http://$es_host:$es_port/_snapshot/$repo"

    if [ $? -eq 0 ]; then
        echo
        echo "[Step 1] Repository has already registered."
    else
        echo "[Step 1] Repository isn't registered. Start registering with path '$register_path'"
        curl --fail-with-body -X PUT "http://$es_host:$es_port/_snapshot/$repo" \
            -H "Content-Type: application/json" \
            -d "{\"type\":\"fs\",\"settings\":{\"location\":\"$register_path\"}}"
        
        if [ $? -eq 0 ]; then
            echo
            echo "[Step 1] Register succeed."
        else
            echo
            echo "[Step 1] Register failed."
            exit 1
        fi
    fi
fi

# Check if snapshot exists
if [ $from_step -le 2 ]; then
    echo "[Step 2] Check if snapshot '$snapshot' exists."
    curl --silent --fail "http://$es_host:$es_port/_snapshot/$repo/$snapshot" > /dev/null

    if [ $? -eq 0 ]; then
        echo
        echo "[Step 2] Snapshot '$snapshot' exists. Start deleting."
        curl --fail-with-body -X DELETE "http://$es_host:$es_port/_snapshot/$repo/$snapshot"

        if [ $? -ne 0 ]; then
            echo
            echo "[Step 2] delete failed. You can retry from this step with option '--from-step 2'."
            exit 1
        fi
    else
        echo "[Step 2] Snapshot '$snapshot' doesn't exist."
    fi
fi

# exporting index
if [ $from_step -le 3 ]; then
    if [ "$index" == "" ]; then
        echo "[Step 3] Start creating snapshot."
        curl --fail-with-body -X PUT "http://$es_host:$es_port/_snapshot/$repo/$snapshot?wait_for_completion=true" \
            -H "Content-Type: application/json"
    else
        echo "[Step 3] Start taking snapshot with index '$index'"

        curl --fail-with-body -X PUT "http://$es_host:$es_port/_snapshot/$repo/$snapshot?wait_for_completion=true" \
            -H "Content-Type: application/json" \
            -d "{\"indices\":[\"$index\"]}"
    fi

    if [ $? -eq 0 ]; then
        echo
        echo "[Step 3] Creating snapshot succeed."
    else
        echo
        echo "[Step 3] Creating snapshot failed. You can retry from this step with option '--from-step 3'."
        exit 1
    fi
fi

# Copy from docker container
if [ $from_step -le 4 ]; then
    if [ "$output" == "" ]; then
        if [ "$index" == "" ]; then
            output="backup_$(date +"%Y%m%d-%H%M%S")"
        else
            output="backup_$index"
        fi
    fi

    echo "[Step 4] Copy folder '$register_path' from docker continer '$es_container' to '$output'"
    docker cp $es_container:$register_path ./$output

    if [ $? -ne 0 ]; then
        echo "[Step 4] copied failed. You can retry from this step with option '--from-step 4'."
        exit 1
    fi
fi

# delete snapshot
if [ $from_step -le 5 ]; then
    echo "[Step 5] Start deleting snapshot."
    curl --fail-with-body -X DELETE "http://$es_host:$es_port/_snapshot/$repo/$snapshot"

    if [ $? -ne 0 ]; then
        echo
        echo "[Step 5] delete failed. You can retry from this step with option '--from-step 5'."
        exit 1
    fi
fi

echo
echo "Done!!"
